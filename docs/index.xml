<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>QURL Documentation</title>
    <link>https://repejota.github.io/qurl/</link>
    <description>Recent content on QURL Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Mar 2017 12:00:00 -0500</lastBuildDate>
    
	<atom:link href="https://repejota.github.io/qurl/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Basic Usage</title>
      <link>https://repejota.github.io/qurl/userdocs/basic-usage/</link>
      <pubDate>Sun, 24 Sep 2017 00:27:22 +0200</pubDate>
      
      <guid>https://repejota.github.io/qurl/userdocs/basic-usage/</guid>
      <description>The most simple query only returns the HTTP Status code response when fetching url contents.
$ curl -s http://qurl.io/q?url=https://example.com | json_pp { &amp;quot;url&amp;quot; : &amp;quot;https://www.example.com&amp;quot;, &amp;quot;status&amp;quot; : 200 }   We use -s curl flag to enable silent or quiet mode. So curl won&amp;rsquo;t show progress meter or error messages. It will still output the resulting data. Also the result is piped to json_pp command to pretty print the JSON data.</description>
    </item>
    
    <item>
      <title>Header Queries</title>
      <link>https://repejota.github.io/qurl/userdocs/header-queries/</link>
      <pubDate>Sun, 24 Sep 2017 00:35:13 +0200</pubDate>
      
      <guid>https://repejota.github.io/qurl/userdocs/header-queries/</guid>
      <description>Get any HTTP headers defined in the response, just adding a header parameter with the name of the header you want to get as value to the URL query.
$ curl -s &#39;http://localhost:8080/q?url=https://github.com&amp;amp;header=Content-Type&#39; | json_pp { &amp;quot;url&amp;quot; : &amp;quot;https://github.com&amp;quot;, &amp;quot;status&amp;quot; : 200, &amp;quot;headers&amp;quot; : { &amp;quot;Content-Type&amp;quot; : [ &amp;quot;text/html; charset=utf-8&amp;quot; ] } }   Notice that the resulting value is not an string but a list of strings. This is because a single header can have multiple values in the same response.</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://repejota.github.io/qurl/devdocs/installation/</link>
      <pubDate>Sun, 24 Sep 2017 00:28:50 +0200</pubDate>
      
      <guid>https://repejota.github.io/qurl/devdocs/installation/</guid>
      <description>To install Qurl the most easy way is to use the golang tooling and execute the following:
$ go get install github.com/repejota/qurl  If you have already installed a previous version of Qurl, you can upgrade it using the -u flag like this:
$ go get -u install github.com/repejota/qurl  Building from sources If you want to get the latest version or execute the development version of Qurl you can build it from sources:</description>
    </item>
    
    <item>
      <title>Deployment</title>
      <link>https://repejota.github.io/qurl/devdocs/deployment/</link>
      <pubDate>Sun, 24 Sep 2017 00:37:48 +0200</pubDate>
      
      <guid>https://repejota.github.io/qurl/devdocs/deployment/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Selector Queries</title>
      <link>https://repejota.github.io/qurl/userdocs/selector-queries/</link>
      <pubDate>Sun, 24 Sep 2017 00:35:28 +0200</pubDate>
      
      <guid>https://repejota.github.io/qurl/userdocs/selector-queries/</guid>
      <description>This is by far, the most powerful and useful feature of Qurl. You can use all the power of CSS selectors to retrieve any matching content of the target URL.
Using Qurl query selectors you get an automated content scraping API tool of remote URL contents without needing any external dependencies neither any browser or aditional HTML parser/analyzer.
Just calling Qurl simple API you will be able to do the same than with other more complex less powerful tools and also in less time and resources.</description>
    </item>
    
  </channel>
</rss>